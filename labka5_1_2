import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, CheckButtons
from scipy.signal import butter, filtfilt


init_amplitude = 1.0
init_frequency = 1.0
init_phase = 0.0
init_noise_mean = 0.0
init_noise_cov = 0.1
init_show_noise = True
init_show_filtered = False
init_filter_cutoff = 2.0

x = np.linspace(0, 2 * np.pi, 1000)
current_noise = np.random.normal(init_noise_mean, np.sqrt(init_noise_cov), x.shape)


def harmonic_with_noise(amplitude, frequency, phase, noise_mean, noise_covariance, show_noise):
    global current_noise
    y_clean = amplitude * np.sin(2 * np.pi * frequency * x + phase)
    if show_noise:
        return y_clean + current_noise, y_clean
    else:
        return y_clean, y_clean


def apply_filter(signal, cutoff=2.0, fs=1000):
    b, a = butter(N=4, Wn=cutoff / (0.5 * fs), btype='low')
    return filtfilt(b, a, signal)

fig, ax = plt.subplots()
plt.subplots_adjust(left=0.25, bottom=0.5)

y_noisy, y_clean = harmonic_with_noise(init_amplitude, init_frequency, init_phase,
                                       init_noise_mean, init_noise_cov, init_show_noise)
l_noisy, = plt.plot(x, y_noisy, label="Noisy")
l_clean, = plt.plot(x, y_clean, label="Clean", linestyle='--')
l_filtered, = plt.plot(x, apply_filter(y_noisy, init_filter_cutoff), label="Filtered", linestyle=':')

plt.legend()


ax_amp = plt.axes([0.25, 0.4, 0.65, 0.03])
ax_freq = plt.axes([0.25, 0.35, 0.65, 0.03])
ax_phase = plt.axes([0.25, 0.3, 0.65, 0.03])
ax_noise_mean = plt.axes([0.25, 0.25, 0.65, 0.03])
ax_noise_cov = plt.axes([0.25, 0.2, 0.65, 0.03])
ax_filter_cutoff = plt.axes([0.25, 0.15, 0.65, 0.03])

s_amp = Slider(ax_amp, 'Amplitude', 0.1, 5.0, valinit=init_amplitude)
s_freq = Slider(ax_freq, 'Frequency', 0.1, 5.0, valinit=init_frequency)
s_phase = Slider(ax_phase, 'Phase', 0.0, 2*np.pi, valinit=init_phase)
s_noise_mean = Slider(ax_noise_mean, 'Noise Mean', -1.0, 1.0, valinit=init_noise_mean)
s_noise_cov = Slider(ax_noise_cov, 'Noise Var', 0.01, 1.0, valinit=init_noise_cov)
s_filter_cutoff = Slider(ax_filter_cutoff, 'Filter Cutoff', 0.1, 10.0, valinit=init_filter_cutoff)


rax = plt.axes([0.025, 0.5, 0.2, 0.15])
check = CheckButtons(rax, ['Show Noise', 'Show Filtered'], [init_show_noise, init_show_filtered])


resetax = plt.axes([0.8, 0.025, 0.1, 0.04])
button = Button(resetax, 'Reset')


def update(val):
    global current_noise
    amp = s_amp.val
    freq = s_freq.val
    phase = s_phase.val
    noise_mean = s_noise_mean.val
    noise_cov = s_noise_cov.val
    filter_cutoff = s_filter_cutoff.val
    show_noise, show_filtered = check.get_status()

    if val == 'noise':
        current_noise = np.random.normal(noise_mean, np.sqrt(noise_cov), x.shape)

    y_noisy, y_clean = harmonic_with_noise(amp, freq, phase, noise_mean, noise_cov, show_noise)
    l_noisy.set_ydata(y_noisy)
    l_clean.set_ydata(y_clean)
    l_filtered.set_ydata(apply_filter(y_noisy, filter_cutoff))

    l_noisy.set_visible(show_noise)
    l_filtered.set_visible(show_filtered)
    fig.canvas.draw_idle()

s_amp.on_changed(lambda val: update(None))
s_freq.on_changed(lambda val: update(None))
s_phase.on_changed(lambda val: update(None))
s_noise_mean.on_changed(lambda val: update('noise'))
s_noise_cov.on_changed(lambda val: update('noise'))
s_filter_cutoff.on_changed(lambda val: update(None))
check.on_clicked(lambda label: update(None))

def reset(event):
    global current_noise
    s_amp.reset()
    s_freq.reset()
    s_phase.reset()
    s_noise_mean.reset()
    s_noise_cov.reset()
    s_filter_cutoff.reset()
    check.set_active(0)
    check.set_active(1)
    current_noise = np.random.normal(init_noise_mean, np.sqrt(init_noise_cov), x.shape)
    update(None)

button.on_clicked(reset)

plt.show()
