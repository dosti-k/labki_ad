import urllib.request
import os
import pandas as pd
from datetime import datetime as dt
import sys

folder = 'import_files'
os.makedirs(folder, exist_ok=True)

for file in os.listdir(folder):
    file_path = os.path.join(folder, file)
    if os.path.isfile(file_path):
        os.remove(file_path)

def download_files(region_id):
    url = f"https://www.star.nesdis.noaa.gov/smcd/emb/vci/VH/get_TS_admin.php?country=UKR&provinceID={region_id}&year1=1981&year2=2024&type=Mean"

    wp = urllib.request.urlopen(url)
    if wp.status == 200:
        text = wp.read().decode('utf-8').strip()
        text = text.split('\n', 1)[-1]
        
        head = ['YEAR', 'WEEK', 'SMN', 'SMT', 'VCI', 'TCI', 'VHI', 'EMPTY']
        from io import StringIO
        data = pd.read_csv(StringIO(text), header=1, names=head)

        time = dt.now().strftime("%d%m%Y%H%M%S")
        filename = f"{region_id}_{time}.csv"
        filepath = os.path.join(folder, filename)
        data.to_csv(filepath, index=False)
        print(f'New file: {filename}')
    else:
        print(f'Status URL not 200: {wp.status}')

for region_id in range(1, 28):
    download_files(region_id)

def read_files(folder):
    files = [f for f in os.listdir(folder) if f.endswith(".csv")]
    print(files)

    if not files:
        print("Error: No files")
        return None

    all_data = []  

    for file in files:
        file_path = os.path.join(folder, file)
        head = ['YEAR', 'WEEK', 'SMN', 'SMT', 'VCI', 'TCI', 'VHI', 'EMPTY']
        df = pd.read_csv(file_path, header=1, names=head)
        
        id_file = int(file.split("_")[0])
        df.insert(0, 'ID', id_file)

        df = df[pd.to_numeric(df['YEAR'], errors='coerce').notna()]
        df['YEAR'] = df['YEAR'].astype(int)
        
        df = df[df["VHI"] != -1]

        all_data.append(df)

    all_df = pd.concat(all_data, ignore_index=True)
    print(f'Quantity:{len(files)}')
    return all_df

all_df = read_files(folder)
print(all_df. head())
print(all_df.tail())

def change_region_id(df):
    regions = {
        1: 22, 2: 24, 3: 23, 4: 25, 5: 3, 6: 4, 7: 8, 8: 19, 9: 20, 
        10: 21, 11: 9, 12: 26, 13: 10, 14: 11, 15: 12, 16: 13, 17: 14, 
        18: 15, 19: 16, 20: 27, 21: 17, 22: 18, 23: 1, 24: 2, 25: 6, 
        26: 7, 27: 5}
    df['ID'] = df['ID'].replace(regions)
    return df

all_df = change_region_id(all_df)
print(all_df.head())
print(all_df.tail())

def vhi_for_region_year(df, region_id, year):
    return df[(df['ID'] == region_id) & (df['YEAR'] == year)][['WEEK', 'VHI']]

def vhi_extremes(df, region_ids, years):
    filtered_df = df[(df['ID'].isin(region_ids)) & (df['YEAR'].isin(years))]
    return {
        'min': filtered_df['VHI'].min(),
        'max': filtered_df['VHI'].max(),
        'mean': filtered_df['VHI'].mean(),
        'median': filtered_df['VHI'].median()
    }

def vhi_for_region_range(df, region_ids, start_year, end_year):
    return df[(df['ID'].isin(region_ids)) & (df['YEAR'].between(start_year, end_year))][['ID', 'YEAR', 'WEEK', 'VHI']]

def extreme_drought_years(df, threshold_percent=20):
    total_regions = df['ID'].nunique()
    threshold_count = int((threshold_percent / 100) * total_regions)

    drought_records = []  

    for year in df['YEAR'].unique():
        drought_data = df[(df['YEAR'] == year) & (df['VHI'] < 15)][['ID', 'VHI']]

        if drought_data['ID'].nunique() >= threshold_count:
            for _, row in drought_data.iterrows():
                drought_records.append([year, row['ID'], row['VHI']])

    drought_df = pd.DataFrame(drought_records, columns=['Year', 'Region ID', 'VHI'])
    
    return drought_df

print(vhi_for_region_year(all_df, region_id=3, year=2020))
print(vhi_extremes(all_df, region_ids=[3, 5, 7], years=[2020, 2021]))
print(vhi_for_region_range(all_df, region_ids=[3, 5], start_year=2015, end_year=2020))
print(extreme_drought_years(all_df, threshold_percent=20))
