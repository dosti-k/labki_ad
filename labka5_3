import numpy as np
import plotly.graph_objs as go
from dash import Dash, dcc, Input, Output, State, ctx
import dash


INIT_PARAMS = {
    "amplitude": 1.0,
    "frequency": 1.0,
    "phase": 0.0,
    "noise_mean": 0.0,
    "noise_covariance": 0.1,
    "show_noise": True
}


stored_noise = None


def custom_filter(signal, window_size=5):
    filtered = np.copy(signal)
    for i in range(window_size, len(signal)):
        filtered[i] = np.mean(signal[i - window_size:i])
    return filtered


def harmonic_with_noise(amplitude, frequency, phase, noise_mean, noise_covariance, show_noise, x, noise=None):
    signal = amplitude * np.sin(2 * np.pi * frequency * x + phase)
    if noise is None:
        noise = np.random.normal(noise_mean, np.sqrt(noise_covariance), size=len(x))
    if show_noise:
        signal_noisy = signal + noise
        filtered = custom_filter(signal_noisy)
        return signal, signal_noisy, filtered, noise
    else:
        filtered = custom_filter(signal)
        return signal, signal, filtered, noise


app = Dash(__name__)
app.title = "Гармоніка з шумом"


x = np.linspace(0, 2, 500)


app.layout = dash.html.Div([
    dcc.Graph(id='plot'),

    dcc.Slider(0.1, 5, step=0.1, value=INIT_PARAMS["amplitude"], id='amplitude-slider', tooltip={"placement": "bottom"}, marks=None),
    dcc.Slider(0.1, 10, step=0.1, value=INIT_PARAMS["frequency"], id='frequency-slider', tooltip={"placement": "bottom"}, marks=None),
    dcc.Slider(0, 2 * np.pi, step=0.1, value=INIT_PARAMS["phase"], id='phase-slider', tooltip={"placement": "bottom"}, marks=None),

    dcc.Slider(-1.0, 1.0, step=0.01, value=INIT_PARAMS["noise_mean"], id='noise-mean-slider', tooltip={"placement": "bottom"}, marks=None),
    dcc.Slider(0.01, 1.0, step=0.01, value=INIT_PARAMS["noise_covariance"], id='noise-cov-slider', tooltip={"placement": "bottom"}, marks=None),

    dcc.Checklist(
        options=[{"label": "Показати шум", "value": "show"}],
        value=["show"] if INIT_PARAMS["show_noise"] else [],
        id="show-noise-checkbox"
    ),

    dash.html.Button("Reset", id="reset-button", n_clicks=0)
])

@app.callback(
    Output("plot", "figure"),
    Input("amplitude-slider", "value"),
    Input("frequency-slider", "value"),
    Input("phase-slider", "value"),
    Input("noise-mean-slider", "value"),
    Input("noise-cov-slider", "value"),
    Input("show-noise-checkbox", "value"),
    Input("reset-button", "n_clicks"),
    State("reset-button", "n_clicks_timestamp"),
    prevent_initial_call="initial_duplicate"
)
def update_plot(amplitude, frequency, phase, noise_mean, noise_covariance, show_noise_checkbox, reset_clicks, reset_time):
    global stored_noise
    show_noise = "show" in show_noise_checkbox

    
    trigger = ctx.triggered_id
    if trigger in ["noise-mean-slider", "noise-cov-slider", "reset-button"] or stored_noise is None:
        stored_noise = np.random.normal(noise_mean, np.sqrt(noise_covariance), len(x))

    signal, noisy_signal, filtered_signal, _ = harmonic_with_noise(
        amplitude, frequency, phase,
        noise_mean, noise_covariance,
        show_noise, x, noise=stored_noise
    )

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x, y=signal, mode="lines", name="Гармоніка", line=dict(color="blue")))
    if show_noise:
        fig.add_trace(go.Scatter(x=x, y=noisy_signal, mode="lines", name="З шумом", line=dict(color="orange", dash="dot")))
    fig.add_trace(go.Scatter(x=x, y=filtered_signal, mode="lines", name="Фільтр", line=dict(color="green", dash="dash")))

    fig.update_layout(title="Гармоніка з шумом і фільтрацією", xaxis_title="Час", yaxis_title="Амплітуда", height=600)
    return fig

if __name__ == "__main__":
    app.run(debug=True)
