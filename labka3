import os
import datetime as dt
import pandas as pd
import seaborn as sns
import urllib.request
import streamlit as st
import matplotlib.pyplot as plt


folder = 'import_files'
os.makedirs(folder, exist_ok=True)


def download_files(region_id):
    url = f"https://www.star.nesdis.noaa.gov/smcd/emb/vci/VH/get_TS_admin.php?country=UKR&provinceID={region_id}&year1=1981&year2=2024&type=Mean"
    wp = urllib.request.urlopen(url)
    if wp.status == 200:
        text = wp.read().decode('utf-8').strip()
        text = text.split('\n', 1)[-1]
        head = ['YEAR', 'WEEK', 'SMN', 'SMT', 'VCI', 'TCI', 'VHI', 'EMPTY']
        from io import StringIO
        data = pd.read_csv(StringIO(text), header=1, names=head)
        time = dt.datetime.now().strftime("%d%m%Y%H%M%S")
        filename = f"{region_id}_{time}.csv"
        filepath = os.path.join(folder, filename)
        data.to_csv(filepath, index=False)
        print(f'New file: {filename}')
    else:
        print(f'Status URL not 200: {wp.status}')


def read_files(folder):
    files = [f for f in os.listdir(folder) if f.endswith(".csv")]
    if not files:
        return None
    all_data = []
    for file in files:
        file_path = os.path.join(folder, file)
        head = ['YEAR', 'WEEK', 'SMN', 'SMT', 'VCI', 'TCI', 'VHI', 'EMPTY']
        df = pd.read_csv(file_path, header=1, names=head)
        id_file = int(file.split("_")[0])
        df.insert(0, 'ID', id_file)
        df = df[pd.to_numeric(df['YEAR'], errors='coerce').notna()]
        df['YEAR'] = df['YEAR'].astype(int)
        df = df[df["VHI"] != -1]
        all_data.append(df)
    return pd.concat(all_data, ignore_index=True)


def change_region_id(df):
    regions = {
        1: 22, 2: 24, 3: 23, 4: 25, 5: 3, 6: 4, 7: 8, 8: 19, 9: 20,
        10: 21, 11: 9, 12: 26, 13: 10, 14: 11, 15: 12, 16: 13, 17: 14,
        18: 15, 19: 16, 20: 27, 21: 17, 22: 18, 23: 1, 24: 2, 25: 6,
        26: 7, 27: 5}
    df['ID'] = df['ID'].replace(regions)
    return df

#Streamlit
st.set_page_config(page_title="labka3", layout="wide")
st.title("labka3")


default_state = {
    "data_type": "VHI",
    "selected_province": 1,
    "week_range": (1, 52),
    "year_range": (1981, 2024),
    "use_all_years": False,
    "color_map": "YlGnBu",
    "sort_asc": False,
    "sort_desc": False
}
for key, value in default_state.items():
    if key not in st.session_state:
        st.session_state[key] = value


ids_with_names = {
    1: 'Вінницька', 2: 'Волинська', 3: 'Дніпропетровська', 4: 'Донецька', 5: 'Житомирська', 6: 'Закарпатська',
    7: 'Запорізька', 8: 'Івано-Франківська', 9: 'Київська', 10: 'Кіровоградська', 11: 'Луганська', 12: 'Львівська',
    13: 'Миколаївська', 14: 'Одеська', 15: 'Полтавська', 16: 'Рівенська', 17: 'Сумська', 18: 'Тернопільська',
    19: 'Харківська', 20: 'Херсонська', 21: 'Хмельницька', 22: 'Черкаська', 23: 'Чернівецька',
    24: 'Чернігівська', 25: 'Республіка Крим'
}


st.sidebar.header("Налаштування фільтрів")

if st.sidebar.button("Завантажити дані (якщо потрібно)"):
    st.info("Запуск завантаження CSV-файлів")
    for idx in range(1, 26):
        st.write(f"!] Завантаження CSV-файлу за VHI-ID №{idx}...")
        download_files(idx)
    st.success("Завантаження завершено!")
    st.session_state["df_all"] = change_region_id(read_files(folder))

data_type_local = st.sidebar.selectbox("Оберіть часовий ряд", ["VCI", "TCI", "VHI"], index=["VCI", "TCI", "VHI"].index(st.session_state["data_type"]))
st.session_state["data_type"] = data_type_local

province_options = [p for p in range(1, 26) if p in ids_with_names]
selected_province_local = st.sidebar.selectbox("Оберіть область", province_options, format_func=lambda x: ids_with_names[x])
st.session_state["selected_province"] = selected_province_local

week_range_local = st.sidebar.slider("Інтервал тижнів", 1, 52, st.session_state["week_range"])
st.session_state["week_range"] = week_range_local

use_all_years_local = st.sidebar.checkbox("Усі роки", value=st.session_state["use_all_years"])
st.session_state["use_all_years"] = use_all_years_local

if not use_all_years_local:
    year_range_local = st.sidebar.slider("Інтервал років", 1981, 2024, st.session_state["year_range"])
    st.session_state["year_range"] = year_range_local

color_map_local = st.sidebar.selectbox("Оберіть колірну палітру для графіків",
                                       ["viridis", "plasma", "inferno", "magma", "cividis", "spring", "summer", "autumn", "winter"],
                                       index=0)
st.session_state["color_map"] = color_map_local

sort_asc_local = st.sidebar.checkbox("Сортувати за зростанням", value=st.session_state["sort_asc"])
sort_desc_local = st.sidebar.checkbox("Сортувати за спаданням", value=st.session_state["sort_desc"])
st.session_state["sort_asc"] = sort_asc_local
st.session_state["sort_desc"] = sort_desc_local

if sort_asc_local and sort_desc_local:
    st.sidebar.warning("Обрано обидва варіанти сортування. Буде застосовано сортування за зростанням.")

if st.sidebar.button("Скинути фільтри"):
    for key in default_state:
        st.session_state[key] = default_state[key]
    st.rerun()


if "df_all" not in st.session_state:
    df_loaded = read_files(folder)
    if df_loaded is not None:
        st.session_state["df_all"] = change_region_id(df_loaded)

if "df_all" not in st.session_state or st.session_state["df_all"] is None:
    st.warning("Дані відсутні. Завантажте їх через кнопку зліва.")
    st.stop()

df_all = st.session_state["df_all"]

df_filtered = df_all.copy()
df_filtered = df_filtered[(df_filtered['WEEK'] >= st.session_state["week_range"][0]) & (df_filtered['WEEK'] <= st.session_state["week_range"][1])]
if not st.session_state["use_all_years"]:
    df_filtered = df_filtered[(df_filtered['YEAR'] >= st.session_state["year_range"][0]) & (df_filtered['YEAR'] <= st.session_state["year_range"][1])]
    year_range_display = f"{st.session_state['year_range'][0]}–{st.session_state['year_range'][1]}"
else:
    year_range_display = "усі роки"
df_filtered = df_filtered[df_filtered["ID"] == st.session_state["selected_province"]]

if st.session_state["sort_asc"] and not st.session_state["sort_desc"]:
    df_filtered = df_filtered.sort_values(by=st.session_state["data_type"], ascending=True)
elif st.session_state["sort_desc"] and not st.session_state["sort_asc"]:
    df_filtered = df_filtered.sort_values(by=st.session_state["data_type"], ascending=False)


tabs = st.tabs(["Таблиця", "Графік часових рядів", "Порівняння областей"])

with tabs[0]:
    st.header("Відфільтровані дані")
    st.dataframe(df_filtered[['ID', 'YEAR', 'WEEK', st.session_state["data_type"]]])

with tabs[1]:
    st.header(f"Графік {st.session_state['data_type']} для області [{ids_with_names[st.session_state['selected_province']]}] ({year_range_display})")
    fig, ax = plt.subplots(figsize=(10, 6))
    for year in sorted(df_filtered['YEAR'].unique()):
        df_year = df_filtered[df_filtered['YEAR'] == year]
        ax.plot(df_year['WEEK'], df_year[st.session_state["data_type"]], label=year)
    ax.set_xlabel("Тиждень")
    ax.set_ylabel(st.session_state["data_type"])
    ax.set_title("Часовий ряд")
    ax.grid(True)
    ax.legend(title="Рік", bbox_to_anchor=(1.05, 1), loc='upper left')
    st.pyplot(fig)

with tabs[2]:
    st.header(f"Порівняння {st.session_state['data_type']} по областях ({year_range_display})")
    df_comp = df_all.copy()
    if not st.session_state["use_all_years"]:
        df_comp = df_comp[(df_comp['YEAR'] >= st.session_state["year_range"][0]) & (df_comp['YEAR'] <= st.session_state["year_range"][1])]
    df_comp = df_comp[(df_comp['WEEK'] >= st.session_state["week_range"][0]) & (df_comp['WEEK'] <= st.session_state["week_range"][1])]
    fig2, ax2 = plt.subplots(figsize=(12, 6))
    sns.boxplot(data=df_comp, x='ID', y=st.session_state["data_type"], palette=st.session_state["color_map"], ax=ax2)
    ax2.set_title("Порівняльний аналіз")
    ax2.set_xlabel("Області")
    ax2.set_ylabel(st.session_state["data_type"])
    ax2.set_xticklabels([ids_with_names.get(int(label.get_text()), label.get_text()) for label in ax2.get_xticklabels()], rotation=45)
    st.pyplot(fig2)
